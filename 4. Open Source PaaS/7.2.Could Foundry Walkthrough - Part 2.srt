1
00:00:00,000 --> 00:00:07,005
In this demo, we will deploy a simple Python-helloworld application using Cloud Foundry.

2
00:00:07,005 --> 00:00:11,640
We have already explored the Stratos console and the functionality it offers.

3
00:00:11,640 --> 00:00:13,965
Now, let's deploy an application.

4
00:00:13,965 --> 00:00:17,160
For that, we need to be in the application view,

5
00:00:17,160 --> 00:00:19,140
and then we'll be able to see that currently,

6
00:00:19,140 --> 00:00:21,115
we have no application is deployed.

7
00:00:21,115 --> 00:00:26,045
However, we will be able to deploy an application by clicking the "Plus' button,

8
00:00:26,045 --> 00:00:29,670
which is on the top right corner. Let's click that.

9
00:00:29,670 --> 00:00:36,380
Here, we have multiple offerings that we'll be able to connect our code to Cloud Foundry.

10
00:00:36,380 --> 00:00:42,640
We could reference a Public GitHub just to Git URL of

11
00:00:42,640 --> 00:00:45,830
different registry and Docker Image or you can

12
00:00:45,830 --> 00:00:49,760
even upload your code directly to this console.

13
00:00:49,760 --> 00:00:55,320
For this example, we're going to use a Public GitHub repository. Let's click that.

14
00:00:55,320 --> 00:00:59,375
Now, before we further configure any applications,

15
00:00:59,375 --> 00:01:02,784
let's look into our Python-Hello World application.

16
00:01:02,784 --> 00:01:09,470
Currently, this is a public repository which contains a helloworld application.

17
00:01:09,470 --> 00:01:13,325
We can inspect our application which is in the app.py file.

18
00:01:13,325 --> 00:01:17,225
Let's click that. Here, we have a flask application

19
00:01:17,225 --> 00:01:21,864
which provides a collection of endpoints such as status,

20
00:01:21,864 --> 00:01:28,325
metrics, and the main route endpoint which returns a Hello World message.

21
00:01:28,325 --> 00:01:33,080
As well, our application currently is serving on port 8080.

22
00:01:33,080 --> 00:01:35,315
If you could go back as well,

23
00:01:35,315 --> 00:01:39,440
just to make sure that our application has a set of requirements,

24
00:01:39,440 --> 00:01:41,765
and these are going to be, for example, flask,

25
00:01:41,765 --> 00:01:45,620
making sure that we need to have flask up and running and being installed.

26
00:01:45,620 --> 00:01:47,605
Let's go back to the main route.

27
00:01:47,605 --> 00:01:50,390
Now, since we've explored our application,

28
00:01:50,390 --> 00:01:52,255
we are ready to deploy it.

29
00:01:52,255 --> 00:01:55,275
Going back to the Cloud Foundry console,

30
00:01:55,275 --> 00:01:58,745
here we are able to select that we want to

31
00:01:58,745 --> 00:02:02,045
have a Cloud Foundry project in a particular organization.

32
00:02:02,045 --> 00:02:04,835
This is going to be the test account which have been

33
00:02:04,835 --> 00:02:08,175
allocated to test and deploy in application.

34
00:02:08,175 --> 00:02:10,785
Then we'll be able to choose a space.

35
00:02:10,785 --> 00:02:14,060
Here, pretty much we have the development stages,

36
00:02:14,060 --> 00:02:15,875
usually would have sandbox,

37
00:02:15,875 --> 00:02:18,620
dev, staging, production, and many more.

38
00:02:18,620 --> 00:02:21,485
For this demo, we're just going to choose the first one,

39
00:02:21,485 --> 00:02:24,985
which is going to be dev. Then we click next.

40
00:02:24,985 --> 00:02:29,600
Here we need to specify the GitHub project for our application.

41
00:02:29,600 --> 00:02:31,280
Since it's a public repository,

42
00:02:31,280 --> 00:02:34,790
is just enough for us to start typing your username.

43
00:02:34,790 --> 00:02:40,270
In this particular case, I'm going to start my GitHub username, which is kgamanji.

44
00:02:40,270 --> 00:02:46,920
Here I'm going to have a view of all the public repositories that I'm currently having.

45
00:02:46,920 --> 00:02:50,920
We want to deploy our Python-helloworld application.

46
00:02:50,920 --> 00:02:55,455
Let's select that. Here, we are retrieved

47
00:02:55,455 --> 00:03:01,055
with the main URL for our project as well of any branches that we'd like to select.

48
00:03:01,055 --> 00:03:06,405
For now, we'll leave it to the master branch. Let's click "Next'.

49
00:03:06,405 --> 00:03:11,975
In this view, we'll be able to select a particular commit that we'd like to deploy.

50
00:03:11,975 --> 00:03:15,335
For example, if we have a commit,

51
00:03:15,335 --> 00:03:17,240
when we update it, for example,

52
00:03:17,240 --> 00:03:20,690
the py.test, we'll be able to choose that particular commit to be deployed,

53
00:03:20,690 --> 00:03:23,630
or we can always choose the latest one.

54
00:03:23,630 --> 00:03:28,115
You always have the options to refresh your view of commits,

55
00:03:28,115 --> 00:03:32,620
just making sure that you always have the latest commit if you'd like to deploy that.

56
00:03:32,620 --> 00:03:35,670
We've selected it to the less commit.

57
00:03:35,670 --> 00:03:38,520
In this view, let's click Next.

58
00:03:38,520 --> 00:03:42,470
Here, we'll have an option to override or

59
00:03:42,470 --> 00:03:46,224
provide any configuration for our Cloud Foundry application.

60
00:03:46,224 --> 00:03:50,120
Now, before I'm actually completing a notice configuration,

61
00:03:50,120 --> 00:03:54,440
let's go back to our Python-hello world application.

62
00:03:54,440 --> 00:03:59,145
In this view, we actually have a manifest.yml.

63
00:03:59,145 --> 00:04:02,505
A manifest.yml is very particular to Cloud Foundry.

64
00:04:02,505 --> 00:04:04,100
We'll be able to provide some of

65
00:04:04,100 --> 00:04:08,155
the configuration's code rather than configuring it in the console.

66
00:04:08,155 --> 00:04:12,215
As such, when we instruct Cloud Foundry to deploy a particular application,

67
00:04:12,215 --> 00:04:15,420
it will look for this manifest.yml file by default.

68
00:04:15,420 --> 00:04:21,065
In this view, we create an application with the name python-helloworld.

69
00:04:21,065 --> 00:04:24,710
We provide a value for our memory, in this case,

70
00:04:24,710 --> 00:04:28,220
64 megabytes and we provide in disk_quota,

71
00:04:28,220 --> 00:04:31,145
in this case 256 megabytes.

72
00:04:31,145 --> 00:04:34,660
As well, since we are running a Python application,

73
00:04:34,660 --> 00:04:39,795
we choose a python-buildpack framework to build our application.

74
00:04:39,795 --> 00:04:42,375
If we can go back to our console,

75
00:04:42,375 --> 00:04:45,940
we'll be able to override some of those parameters for example,

76
00:04:45,940 --> 00:04:49,060
such as the application name or the quotas.

77
00:04:49,060 --> 00:04:54,395
But we choose not to do so since we have that already in our configuration file.

78
00:04:54,395 --> 00:04:57,855
If you scroll down, you'll be able to configure your routes.

79
00:04:57,855 --> 00:05:00,050
In this particular case, I'm just going to select,

80
00:05:00,050 --> 00:05:01,235
create a random route,

81
00:05:01,235 --> 00:05:06,314
since I just want one random endpoint just to access and test my application.

82
00:05:06,314 --> 00:05:11,139
Scrolling down, you'll be able to create,

83
00:05:11,139 --> 00:05:15,710
or actually, we'll be able to choose a particular stack for our application.

84
00:05:15,710 --> 00:05:19,320
The stacks are going to be the base operating system.

85
00:05:19,360 --> 00:05:23,345
If we're scrolling down, even be able to customize

86
00:05:23,345 --> 00:05:27,875
our buildpacks or provide a Docker Image and if a Docker Image is private,

87
00:05:27,875 --> 00:05:31,435
you'll be able to provide a Docker username and password.

88
00:05:31,435 --> 00:05:34,605
Unless we could configure, is the run command,

89
00:05:34,605 --> 00:05:37,700
so how exactly your application should be started,

90
00:05:37,700 --> 00:05:39,515
and the Health Checks?

91
00:05:39,515 --> 00:05:42,840
I'll be able to either check an http endpoint,

92
00:05:42,840 --> 00:05:47,695
a port, or run a particular process to check if your application is in the health state.

93
00:05:47,695 --> 00:05:50,930
For that, you'll be able to choose the amount of seconds you would

94
00:05:50,930 --> 00:05:54,560
like that health check to be implemented or called.

95
00:05:54,560 --> 00:05:59,215
In this view, the only thing we've selected has been the create a random route.

96
00:05:59,215 --> 00:06:02,990
We don't want to change any of the other configurations for now.

97
00:06:02,990 --> 00:06:06,515
The last thing we need to do is to click "Deploy."

98
00:06:06,515 --> 00:06:09,230
In this view, we already see that some of

99
00:06:09,230 --> 00:06:12,245
the configuration has been picked up by Cloud Foundry.

100
00:06:12,245 --> 00:06:14,270
For example, in this console,

101
00:06:14,270 --> 00:06:18,500
we can see that the name has been picked up, what's being python-helloworld.

102
00:06:18,500 --> 00:06:23,390
We have the buildpacks for Python to build our application.

103
00:06:23,390 --> 00:06:26,300
We've got our disk and memory quotas already set

104
00:06:26,300 --> 00:06:30,875
up and we already have a route being provisioned.

105
00:06:30,875 --> 00:06:32,660
Soon as the application is deployed,

106
00:06:32,660 --> 00:06:36,500
we'll be able to use this particular route to access the application.

107
00:06:36,500 --> 00:06:39,395
Let's click on the go-to app summary.

108
00:06:39,395 --> 00:06:43,145
This pretty much returns us to the application view.

109
00:06:43,145 --> 00:06:46,460
Here we'll be able to see that our application is starting and

110
00:06:46,460 --> 00:06:50,315
it will be up and running in a couple of seconds.

111
00:06:50,315 --> 00:06:54,695
Let's explore offer options for our application.

112
00:06:54,695 --> 00:06:58,444
Again, you'll be able to see the quotas that are set up for our application.

113
00:06:58,444 --> 00:07:02,360
The build information such as the buildpacks framework,

114
00:07:02,360 --> 00:07:04,480
the git commit as well.

115
00:07:04,480 --> 00:07:06,410
If you'd like to choose a different commit,

116
00:07:06,410 --> 00:07:08,485
you'll be able to visualize it here.

117
00:07:08,485 --> 00:07:12,454
The application info such as how to start the application.

118
00:07:12,454 --> 00:07:15,290
Here we invoke Python and app.py,

119
00:07:15,290 --> 00:07:17,135
and we specify the port.

120
00:07:17,135 --> 00:07:19,385
Actually, the port is going to be picked up automatically,

121
00:07:19,385 --> 00:07:21,250
and here's going to be 8080.

122
00:07:21,250 --> 00:07:23,525
If you would configure a health check,

123
00:07:23,525 --> 00:07:25,490
you'll be able to visualize it here.

124
00:07:25,490 --> 00:07:31,385
Now, if I do a refresh and scroll all the way up,

125
00:07:31,385 --> 00:07:33,260
I can see that the status of my application

126
00:07:33,260 --> 00:07:36,545
has been changed to deploy it and it's online.

127
00:07:36,545 --> 00:07:38,435
Let's actually access it.

128
00:07:38,435 --> 00:07:40,955
For that, we can click on the routes.

129
00:07:40,955 --> 00:07:43,600
Here we see our endpoint.

130
00:07:43,600 --> 00:07:45,490
If you click on this endpoint,

131
00:07:45,490 --> 00:07:50,105
it will pretty much direct us to a running instance of our application.

132
00:07:50,105 --> 00:07:52,565
Since it's a python-helloworld application,

133
00:07:52,565 --> 00:07:57,220
it will return our helloworld message just as expected.

134
00:07:57,220 --> 00:07:59,585
Let's go back to our console.

135
00:07:59,585 --> 00:08:04,505
You'll be able to inspect the instances so if you click on the Instances tab,

136
00:08:04,505 --> 00:08:08,570
you'll be able to see that we have one replica of our application.

137
00:08:08,570 --> 00:08:11,930
Most importantly, you'll be able to see some of the memory, disk,

138
00:08:11,930 --> 00:08:14,510
and CPU usage for this application,

139
00:08:14,510 --> 00:08:20,420
which is always handy to understand the actual resources your application is using.

140
00:08:20,420 --> 00:08:22,670
We can click on the Log Streams,

141
00:08:22,670 --> 00:08:28,600
which will provide a console of all of the logs that are collected from our application.

142
00:08:28,600 --> 00:08:30,300
In the services tab,

143
00:08:30,300 --> 00:08:32,900
we will be able to see any services that have been integrated

144
00:08:32,900 --> 00:08:35,645
with our applications such as databases.

145
00:08:35,645 --> 00:08:37,205
Since we've configured none,

146
00:08:37,205 --> 00:08:41,330
this view is going to be empty.

147
00:08:41,330 --> 00:08:48,490
Then we'll be able to see an aggregation of events and more importantly metrics.

148
00:08:48,490 --> 00:08:52,050
If you'd like to have a more insightful view of our CPU memory and disk,

149
00:08:52,050 --> 00:08:54,725
you will be able to see that from the metrics view.

150
00:08:54,725 --> 00:08:59,240
The auto-scaling functionality will allow us to scale up and down if

151
00:08:59,240 --> 00:09:04,219
the customers have a high demand and there's a lot of traffic coming to our application,

152
00:09:04,219 --> 00:09:07,480
but that you'll be able to create a policy.

153
00:09:07,480 --> 00:09:11,315
The last thing I'd like to showcase is the GitHub functionality,

154
00:09:11,315 --> 00:09:16,265
which will provide us with an interview of the deployment information.

155
00:09:16,265 --> 00:09:19,084
For example, the year-old to our repository,

156
00:09:19,084 --> 00:09:23,155
the branch, and the particular commit that we have been deployed.

157
00:09:23,155 --> 00:09:27,350
As such, this is a very realistic example of how you'll

158
00:09:27,350 --> 00:09:30,775
be able to deploy your application using Cloud Foundry,

159
00:09:30,775 --> 00:09:33,830
but more importantly, with minimal engineering effort.

160
00:09:33,830 --> 00:09:37,295
The only thing that you had to do in this particular demo,

161
00:09:37,295 --> 00:09:41,030
was to upload or to even reference your source code,

162
00:09:41,030 --> 00:09:45,570
and the deployment has been done for you in the background.

