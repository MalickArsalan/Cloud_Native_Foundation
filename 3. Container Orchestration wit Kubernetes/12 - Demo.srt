1
00:00:00,000 --> 00:00:02,220
In this demo, we will explore

2
00:00:02,220 --> 00:00:06,210
the cluster assets by using some of the predefined Kubernetes tail commands,

3
00:00:06,210 --> 00:00:08,070
such as cluster info,

4
00:00:08,070 --> 00:00:10,830
or getting nodes and describe nodes.

5
00:00:10,830 --> 00:00:12,765
However, before we do that,

6
00:00:12,765 --> 00:00:14,910
let's look into the kube config file,

7
00:00:14,910 --> 00:00:17,565
which will allow us to query the clustering.

8
00:00:17,565 --> 00:00:20,540
As mentioned, the kube config file is usually stored under

9
00:00:20,540 --> 00:00:26,100
the.kube folder and in the config file.

10
00:00:26,100 --> 00:00:29,150
If you look inside that particular file,

11
00:00:29,150 --> 00:00:35,170
we'll be able to see all the necessary information metadata, to access cluster.

12
00:00:35,170 --> 00:00:37,060
The first thing that we've learned,

13
00:00:37,060 --> 00:00:39,425
is that we're going to have a cluster configuration.

14
00:00:39,425 --> 00:00:43,965
Here we have a cluster with the name kind-demo,

15
00:00:43,965 --> 00:00:47,645
which will authenticate or authorize

16
00:00:47,645 --> 00:00:52,020
any users to access the cluster by using a certificate authority data.

17
00:00:52,020 --> 00:00:55,250
As you can see, this is quite a lengthy input that we have here,

18
00:00:55,250 --> 00:00:57,470
which has been already auto-generated.

19
00:00:57,470 --> 00:00:59,010
Then we have the server,

20
00:00:59,010 --> 00:01:01,325
or the API endpoint for Kubernetes.

21
00:01:01,325 --> 00:01:07,430
Here this is running on the local host on port 61151.

22
00:01:07,430 --> 00:01:11,425
The second thing that we require is to define a user.

23
00:01:11,425 --> 00:01:15,345
Let's look into our kube config file for the user section.

24
00:01:15,345 --> 00:01:20,465
Here we have a user with the name kind-demo as well,

25
00:01:20,465 --> 00:01:25,040
and we authenticate this user by using a client certificate data.

26
00:01:25,040 --> 00:01:28,580
We go down, we're going to have a client key data as well.

27
00:01:28,580 --> 00:01:30,710
This will be used to make sure that the user

28
00:01:30,710 --> 00:01:34,085
has the right permissions to carry the cluster.

29
00:01:34,085 --> 00:01:35,660
The last thing we need to do,

30
00:01:35,660 --> 00:01:37,880
is to link the cluster to user,

31
00:01:37,880 --> 00:01:40,375
for that we're going to use a context.

32
00:01:40,375 --> 00:01:43,050
Here we have a context,

33
00:01:43,050 --> 00:01:50,670
which links the cluster with the name kind-demo, to user kind-demo.

34
00:01:50,670 --> 00:01:54,390
Then we set the current context to be kind-demo as well.

35
00:01:54,390 --> 00:01:58,340
Pretty much, we are going to use the current cluster and authentication

36
00:01:58,340 --> 00:02:03,250
metadata to make sure that we can query and interact with cluster resources.

37
00:02:03,250 --> 00:02:05,685
Let's exit the file.

38
00:02:05,685 --> 00:02:08,060
Once we have a valid kube config file,

39
00:02:08,060 --> 00:02:10,255
we'll be able to query the cluster.

40
00:02:10,255 --> 00:02:14,290
The first thing we can do to find more information about all cluster,

41
00:02:14,290 --> 00:02:17,170
is to looking into the main information provides.

42
00:02:17,170 --> 00:02:22,160
That can be queried by using a kubectl cluster info command.

43
00:02:22,160 --> 00:02:27,500
If you hit enter, you'll be able to see the endpoint for our Kubernetes master,

44
00:02:27,500 --> 00:02:34,030
which is running on the local host on port 61151 and then we'll be able to see any atoms,

45
00:02:34,030 --> 00:02:36,260
in this case, we have the KubeDNS,

46
00:02:36,260 --> 00:02:38,650
which provides our DNS capabilities.

47
00:02:38,650 --> 00:02:44,495
We're just going to run on local host on port 61151.

48
00:02:44,495 --> 00:02:48,035
However, it's going to be a particular service within the cluster.

49
00:02:48,035 --> 00:02:51,625
It's going to be a KubeDNS service.

50
00:02:51,625 --> 00:02:56,255
The other thing we can do to query the clusters to identify the notes that we have.

51
00:02:56,255 --> 00:02:58,219
For that, we issue kubectl,

52
00:02:58,219 --> 00:03:02,575
get nodes command, which will list all the current nodes within the cluster.

53
00:03:02,575 --> 00:03:05,025
We have a demo-control-plane note,

54
00:03:05,025 --> 00:03:08,275
which is a master node and it's in a ready status,

55
00:03:08,275 --> 00:03:10,955
which has been created just under one hour ago.

56
00:03:10,955 --> 00:03:16,810
We can see the version of these particular note, which is 1.19.1.

57
00:03:16,810 --> 00:03:21,240
To get more output or a wider output from this command,

58
00:03:21,240 --> 00:03:23,810
we can use the -o wide flag,

59
00:03:23,810 --> 00:03:27,440
which indicates that we want more information from all cluster.

60
00:03:27,440 --> 00:03:30,020
Again, we're going to have the name of the note,

61
00:03:30,020 --> 00:03:31,820
the status, its role,

62
00:03:31,820 --> 00:03:33,685
which is going to be master,

63
00:03:33,685 --> 00:03:39,985
the version of Kubernetes which is going to be 1.19.1 and we have the Internal-IP.

64
00:03:39,985 --> 00:03:43,480
This is going to be pretty much the IP of the node.

65
00:03:43,480 --> 00:03:46,020
Then we'll have the Ubuntu,

66
00:03:46,020 --> 00:03:48,180
which is our OS image.

67
00:03:48,180 --> 00:03:50,295
We can specify the kernel version,

68
00:03:50,295 --> 00:03:52,395
as well the Container runtime,

69
00:03:52,395 --> 00:03:53,835
which in this case is containerd,

70
00:03:53,835 --> 00:03:57,610
running in version 1.4.0.

71
00:03:58,790 --> 00:04:02,390
Once we have all nodes, we'll be able to actually have

72
00:04:02,390 --> 00:04:07,490
a even more insightful output by using a describe command.

73
00:04:07,490 --> 00:04:11,990
For that, we can use a kubectl describe command and

74
00:04:11,990 --> 00:04:17,150
want us to get more information about our node and then we specify the name of the node.

75
00:04:17,150 --> 00:04:24,435
You hit enter. This is going to be a very verbose output.

76
00:04:24,435 --> 00:04:30,230
However, we'll have information such as the name of the cluster, any roles,

77
00:04:30,230 --> 00:04:34,670
in this case master and your labels and annotations associated with it,

78
00:04:34,670 --> 00:04:36,915
the time when it was created.

79
00:04:36,915 --> 00:04:40,130
Then you'll have a series of events which

80
00:04:40,130 --> 00:04:44,100
makes sure that we have our node up and running.

81
00:04:44,100 --> 00:04:46,160
We have the address,

82
00:04:46,160 --> 00:04:50,595
which is the internal IP and host name for all cluster.

83
00:04:50,595 --> 00:04:53,975
We have more details about the capacity,

84
00:04:53,975 --> 00:05:00,170
this is going to contain the CPU and memory that we have allocated for our node,

85
00:05:00,170 --> 00:05:03,170
we'll be able to do dive into the system info,

86
00:05:03,170 --> 00:05:05,660
such as the operating system version,

87
00:05:05,660 --> 00:05:08,330
or the operating system image,

88
00:05:08,330 --> 00:05:11,055
the current kernel version, and so forth.

89
00:05:11,055 --> 00:05:13,170
As well, we'll be able to see the Kubelet version,

90
00:05:13,170 --> 00:05:16,215
which in this case is 1.19.1.

91
00:05:16,215 --> 00:05:21,755
But more importantly, we'll be able to identify the PodCIDR and this will be containing

92
00:05:21,755 --> 00:05:24,950
the subset which will be used to allocate

93
00:05:24,950 --> 00:05:28,510
an IP to the pods running on this particular node.

94
00:05:28,510 --> 00:05:32,495
The last thing we can observe are the pods running on this particular node.

95
00:05:32,495 --> 00:05:35,090
In this case, we can see that we have nine pods in

96
00:05:35,090 --> 00:05:38,090
total and we'll be able to even look into those,

97
00:05:38,090 --> 00:05:40,295
for example the namespace,

98
00:05:40,295 --> 00:05:42,260
the name of the pod,

99
00:05:42,260 --> 00:05:47,830
and the amount of CPU requests and memory requests it actual requires.

100
00:05:47,830 --> 00:05:50,945
We can even have a more insightful output of

101
00:05:50,945 --> 00:05:54,515
the allocated resources currently on this particular node.

102
00:05:54,515 --> 00:05:57,800
We can see that 21 percent of the CPU amount has been

103
00:05:57,800 --> 00:06:02,035
consumed and only nine percent of the memory amount has been consumed.

104
00:06:02,035 --> 00:06:06,620
As well, the node description is going to be associated with a series of events,

105
00:06:06,620 --> 00:06:09,215
for example if you schedule a pod in this particular node,

106
00:06:09,215 --> 00:06:14,610
we'll be able to see this particular log or event recorded over here.

