1
00:00:00,000 --> 00:00:03,810
In this demo, we will create a helm chart to manage

2
00:00:03,810 --> 00:00:08,235
the deployment and namespace resources for an application.

3
00:00:08,235 --> 00:00:09,990
Then will use the at home chart,

4
00:00:09,990 --> 00:00:12,615
and deployed using argo-cd.

5
00:00:12,615 --> 00:00:16,275
Before we do so, let's explore our helm chart.

6
00:00:16,275 --> 00:00:19,470
If I list all of the files I currently have in the directory,

7
00:00:19,470 --> 00:00:21,510
I have a helm chart and of course,

8
00:00:21,510 --> 00:00:25,005
I have the expected components such as a charted helm,

9
00:00:25,005 --> 00:00:28,185
the templates folder, and devalues file,

10
00:00:28,185 --> 00:00:31,860
wonderful prod, and a default values file as well.

11
00:00:31,860 --> 00:00:35,320
Let's explore our charted helm file.

12
00:00:36,050 --> 00:00:39,390
First of all, we provision a name for our chart,

13
00:00:39,390 --> 00:00:41,960
in this case python-hello-world.

14
00:00:41,960 --> 00:00:46,700
Then we have a short description of what exactly these helm chart is going to do,

15
00:00:46,700 --> 00:00:50,435
in this case is just going to install a python-hello-world deployment.

16
00:00:50,435 --> 00:00:55,525
Begin provision in keywords for a quick identification of what the chart does.

17
00:00:55,525 --> 00:01:00,050
We have a version which here is said to 1.0.0,

18
00:01:00,050 --> 00:01:02,930
and of course we can provide at list of maintainers,

19
00:01:02,930 --> 00:01:06,140
their name, and the method of contact.

20
00:01:06,140 --> 00:01:08,330
If we release the files in the template folder,

21
00:01:08,330 --> 00:01:11,225
we'll be able to see the manifest for a deployment,

22
00:01:11,225 --> 00:01:14,795
and a namespace, this are already parameterized,

23
00:01:14,795 --> 00:01:17,960
which means that we can pass values to these manifests.

24
00:01:17,960 --> 00:01:21,810
Let's explore the names-pace resource,

25
00:01:21,810 --> 00:01:26,415
so we going to look into within the templates namespace.yaml file,

26
00:01:26,415 --> 00:01:30,324
and here we have a namespace resource,

27
00:01:30,324 --> 00:01:32,975
and we provide a name for our namespace,

28
00:01:32,975 --> 00:01:34,925
but currently this is parameterized,

29
00:01:34,925 --> 00:01:39,055
so we're going to take the name of the namespace from the values.yaml file.

30
00:01:39,055 --> 00:01:41,705
If you look into the deployment manifest,

31
00:01:41,705 --> 00:01:43,565
that's going to be parametrized too,

32
00:01:43,565 --> 00:01:46,600
but we will parameterize different fields.

33
00:01:46,600 --> 00:01:49,724
As such, we still parameterize the namespace,

34
00:01:49,724 --> 00:01:54,185
so this is going to be set to a particular value from the values.yaml file,

35
00:01:54,185 --> 00:01:57,560
and then we parameterize the amount of replicas,

36
00:01:57,560 --> 00:02:00,220
and we can even parameterize the image,

37
00:02:00,220 --> 00:02:03,300
so we specify an image repository,

38
00:02:03,300 --> 00:02:05,320
and an image tag,

39
00:02:05,320 --> 00:02:10,580
and thus component of our helm chart is going to be the values.yaml file.

40
00:02:10,580 --> 00:02:18,275
Let's look into that. Currently, we have a default name for our namespace,

41
00:02:18,275 --> 00:02:20,935
which here is going to be set to test.

42
00:02:20,935 --> 00:02:26,210
For the image, we can specify the repository and

43
00:02:26,210 --> 00:02:31,330
the tag parameters since these have been parameterized already using Go template.

44
00:02:31,330 --> 00:02:36,410
As such the repository will point to the python- hello-world image and

45
00:02:36,410 --> 00:02:41,820
the tag is going to specify the v point 1.0.0 version,

46
00:02:41,820 --> 00:02:46,910
and for our deployment, we are parameterizing the amount for replicas,

47
00:02:46,910 --> 00:02:49,430
which in this case is going to be set to three.

48
00:02:49,430 --> 00:02:54,350
As you can see, we have provisioned a values.prod.yaml as well.

49
00:02:54,350 --> 00:02:58,985
This can be used to overwrite some of the parameters for our helm chart.

50
00:02:58,985 --> 00:03:02,945
Let's look into values-prod.yaml as well.

51
00:03:02,945 --> 00:03:09,155
As you can see here, we only parameterize the name of the namespace and reset it to prod,

52
00:03:09,155 --> 00:03:13,235
so instead of parameterizing all of the variables,

53
00:03:13,235 --> 00:03:16,555
we just choose to overwrite the name of the namespace.

54
00:03:16,555 --> 00:03:22,650
Let's deploy our helm chart by using an argo-cd application.

55
00:03:22,650 --> 00:03:26,940
First of all, let us look into the Y for argo-cd.

56
00:03:26,940 --> 00:03:31,295
As expected, currently we have no applications deployed yet.

57
00:03:31,295 --> 00:03:36,635
Let's first deploy our application using the default values.yaml file.

58
00:03:36,635 --> 00:03:40,630
For that, we need to create an Application CRD.

59
00:03:40,630 --> 00:03:45,680
The Applications CRD is going to have a name set to python-hello-world,

60
00:03:45,680 --> 00:03:48,610
and it's going to be deployed in the argo-cd namespace.

61
00:03:48,610 --> 00:03:51,410
The destination section specifies that we want

62
00:03:51,410 --> 00:03:54,995
to deploy the manifests in the current cluster,

63
00:03:54,995 --> 00:03:58,825
and in the source will be able to reference our manifests.

64
00:03:58,825 --> 00:04:00,395
Since we have a helm chart,

65
00:04:00,395 --> 00:04:03,965
we're going to specify the location of our chart.

66
00:04:03,965 --> 00:04:07,265
As such, the chart currently stored in

67
00:04:07,265 --> 00:04:12,910
argo-cd-demo repository under the helm-python-hello-world path,

68
00:04:12,910 --> 00:04:16,995
and we can even verify that by looking into the repo,

69
00:04:16,995 --> 00:04:21,300
so within argo-cd-demo, helm-python-hello-world repository,

70
00:04:21,300 --> 00:04:22,690
we have our helm chart,

71
00:04:22,690 --> 00:04:25,595
we have been exploring just before this.

72
00:04:25,595 --> 00:04:27,620
The last thing we need to specify,

73
00:04:27,620 --> 00:04:33,935
especially when you're using a helm deployment for argo-cd is to specify the values file.

74
00:04:33,935 --> 00:04:38,955
In this particular case, we specify the default values.yaml file to be used.

75
00:04:38,955 --> 00:04:41,600
If you'd like to deploy the same application,

76
00:04:41,600 --> 00:04:44,350
but using the prod as file,

77
00:04:44,350 --> 00:04:48,200
we'll be able to do so by creating another Application CRD.

78
00:04:48,200 --> 00:04:54,350
So if you look into the python-hello-world for prod deployment,

79
00:04:54,350 --> 00:04:58,100
the configuration is going to be quite similar,

80
00:04:58,100 --> 00:05:01,265
is going to be deployed within the same cluster,

81
00:05:01,265 --> 00:05:03,785
using the destination configuration.

82
00:05:03,785 --> 00:05:05,405
However, in the source,

83
00:05:05,405 --> 00:05:09,355
we still specify that our chart is within the argo-cd-demo,

84
00:05:09,355 --> 00:05:13,035
within the helm-python-hello-world folder.

85
00:05:13,035 --> 00:05:16,835
However, we just change the values file in this case,

86
00:05:16,835 --> 00:05:19,790
it's going to point to value-prod.yaml,

87
00:05:19,790 --> 00:05:24,675
so it will create a namespace with the name prod instead.

88
00:05:24,675 --> 00:05:28,245
Let's deploy both of these Applications CRDs,

89
00:05:28,245 --> 00:05:35,655
for that we're going to use gives kubectyl apply - F, referencing our manifests.

90
00:05:35,655 --> 00:05:39,900
This has been creating a simple python-hello-world application.

91
00:05:39,900 --> 00:05:45,510
We can even verify that by going to our UI in argo-cd,

92
00:05:45,510 --> 00:05:49,675
we can click on our python-hello-world and we see that we have a test,

93
00:05:49,675 --> 00:05:53,570
and a deployment, and we'll be able to synchronize that as well.

94
00:05:53,570 --> 00:05:56,710
Lets click on the "SYNC", and synchronize,

95
00:05:56,710 --> 00:06:01,515
and this will create the test and the python-hello-world deployment.

96
00:06:01,515 --> 00:06:06,915
Further, let's deploy our argo-cd, prod,

97
00:06:06,915 --> 00:06:08,970
Application CRD as well,

98
00:06:08,970 --> 00:06:14,160
and this will create a python-hello-world-prod application.

99
00:06:14,160 --> 00:06:16,680
Going back to our UI,

100
00:06:16,680 --> 00:06:21,020
we'll be able to see that we have now a prod version for our application,

101
00:06:21,020 --> 00:06:25,130
and if you click on it, you will see that our namespace is already named prod,

102
00:06:25,130 --> 00:06:29,515
so we already have been overwriting the values for our manifests.

103
00:06:29,515 --> 00:06:35,210
Let's synchronize these resources as well by clicking on "SYNC" and synchronize.

104
00:06:35,210 --> 00:06:40,770
As expected as this will create a namespace and a deployment wave, three pods as well.

105
00:06:40,770 --> 00:06:45,220
The last thing we need to do is to verify these resources within the cluster.

106
00:06:45,220 --> 00:06:46,995
Going back to our terminal,

107
00:06:46,995 --> 00:06:50,595
we can do a kubectyl get namespaces,

108
00:06:50,595 --> 00:06:54,050
and as expected, we're going to have a test namespace,

109
00:06:54,050 --> 00:06:58,845
which is the default name for all the namespace which has been created a minute to go,

110
00:06:58,845 --> 00:07:01,025
and we're going to have a prod namespace,

111
00:07:01,025 --> 00:07:03,730
which was created under 20 seconds ago.

112
00:07:03,730 --> 00:07:07,020
In fervor we can get pods in each namespace,

113
00:07:07,020 --> 00:07:09,005
so if you look into the test namespace,

114
00:07:09,005 --> 00:07:12,995
we're going to have three pos for python-hello-world,

115
00:07:12,995 --> 00:07:17,769
and if we query the pods within the prod namespace,

116
00:07:17,769 --> 00:07:22,620
we'll be able to see that we have three pos for our python-hello-world as well.

117
00:07:22,620 --> 00:07:26,390
This is how you'll be able to template the configuration for

118
00:07:26,390 --> 00:07:30,530
multiple environments by using one helm chart, but more importantly,

119
00:07:30,530 --> 00:07:34,640
you'll be able to manage those and deploy those using argo-cd,

120
00:07:34,640 --> 00:07:38,440
which makes the best of automatic reconciliation,

121
00:07:38,440 --> 00:07:44,370
and identification of changes from within your get repository and manifests.

