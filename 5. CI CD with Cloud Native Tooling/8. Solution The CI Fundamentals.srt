1
00:00:00,000 --> 00:00:04,110
In this video, we're going to provide the solution to the exercise of how to

2
00:00:04,110 --> 00:00:08,895
package in application or to dockerize it using GitHub action.

3
00:00:08,895 --> 00:00:12,420
First of all, we have our Python Hello World image and

4
00:00:12,420 --> 00:00:16,185
we'd like to push the latest version of our image to Docker Hub.

5
00:00:16,185 --> 00:00:19,080
Before we deep dive into our application,

6
00:00:19,080 --> 00:00:22,575
let's explore the tags we have currently in GitHub.

7
00:00:22,575 --> 00:00:29,040
At the moment, for our pixel potato Python Hello World repository or image,

8
00:00:29,040 --> 00:00:30,225
we have only one tag,

9
00:00:30,225 --> 00:00:32,760
which is in version 1.0.0.

10
00:00:32,760 --> 00:00:34,635
At the end of the solution,

11
00:00:34,635 --> 00:00:38,130
you'll be able to see the latest tag within this view as well.

12
00:00:38,130 --> 00:00:41,709
Let's go back to our Python Hello World application.

13
00:00:41,709 --> 00:00:47,780
Currently, we have our main logic within the app.py, and if you could click on it,

14
00:00:47,780 --> 00:00:54,505
we'll see a very simple application which presents a couple of inputs such as status,

15
00:00:54,505 --> 00:00:57,350
metrics, and the main route,

16
00:00:57,350 --> 00:01:00,380
which will just return a Hello World message to us.

17
00:01:00,380 --> 00:01:03,780
Going back to our Python Hello World view,

18
00:01:03,780 --> 00:01:06,710
we'll be able to see that we have a Dockerfile

19
00:01:06,710 --> 00:01:09,805
which already has been presented with this repository.

20
00:01:09,805 --> 00:01:11,605
If you click on the "Dockerfile",

21
00:01:11,605 --> 00:01:16,655
this will contain pretty much all the main steps we need to containerize our application.

22
00:01:16,655 --> 00:01:21,505
As such, we are going to use a base Python image in version 3.8.

23
00:01:21,505 --> 00:01:23,375
We label our image,

24
00:01:23,375 --> 00:01:27,785
copy all the content in the current repository to the.

25
00:01:27,785 --> 00:01:29,870
/app inside the container.

26
00:01:29,870 --> 00:01:35,305
Then we're going to set this particular repository /app as our working directory,

27
00:01:35,305 --> 00:01:38,390
after which we will install all the requirements which are

28
00:01:38,390 --> 00:01:41,690
presented in our requirements.txt file.

29
00:01:41,690 --> 00:01:43,415
To start our container,

30
00:01:43,415 --> 00:01:45,470
we will involve a cmd command,

31
00:01:45,470 --> 00:01:49,570
which will just run our application by using Python.

32
00:01:49,570 --> 00:01:52,440
Lets go back to our main view.

33
00:01:52,440 --> 00:01:54,390
To create a GitHub Action,

34
00:01:54,390 --> 00:01:56,744
which will containerize our application,

35
00:01:56,744 --> 00:02:01,740
we will need to create it in the.github/workflows directory.

36
00:02:01,740 --> 00:02:04,170
Let's look inside that directory.

37
00:02:04,170 --> 00:02:05,865
Here we have already

38
00:02:05,865 --> 00:02:09,690
a docker-build GitHub action which we'll will explore in more detail.

39
00:02:09,690 --> 00:02:11,605
However, before we do that,

40
00:02:11,605 --> 00:02:15,410
let's look into one of the predefined GitHub action

41
00:02:15,410 --> 00:02:19,075
which will help us to build and push our Docker images.

42
00:02:19,075 --> 00:02:21,780
This has been referenced in your exercise,

43
00:02:21,780 --> 00:02:26,585
so you'll be able to follow the instructions here to easily dockerize your application.

44
00:02:26,585 --> 00:02:31,935
This particular action is actually constructed of three main actions.

45
00:02:31,935 --> 00:02:35,130
A login action which will authenticate you to GitHub get

46
00:02:35,130 --> 00:02:38,755
help by using your credentials stored securely.

47
00:02:38,755 --> 00:02:42,249
The setup-buildx, which will present

48
00:02:42,249 --> 00:02:48,790
a more extensive CLI to build an application and setup-qemu,

49
00:02:48,790 --> 00:02:52,570
which is able to execute on multiarchitecture containers,

50
00:02:52,570 --> 00:02:54,445
and this is very useful when we have

51
00:02:54,445 --> 00:02:57,740
applications using multiple libraries and frameworks.

52
00:02:57,740 --> 00:03:00,030
If you can scroll a bit more down,

53
00:03:00,030 --> 00:03:03,435
you'll be able to see some of the main usages of how

54
00:03:03,435 --> 00:03:07,165
you'll be able to utilize these particular GitHub action.

55
00:03:07,165 --> 00:03:10,480
You'll be able to reference this and reference it in

56
00:03:10,480 --> 00:03:15,745
your GitHub action and to maybe build more complex use cases as well.

57
00:03:15,745 --> 00:03:21,585
Let's go back to our GitHub action in the Python Hello World repository.

58
00:03:21,585 --> 00:03:24,375
Let's look into our docker-build.yml.

59
00:03:24,375 --> 00:03:29,550
Here we define our GitHub action with the name Docker Build and Push.

60
00:03:29,550 --> 00:03:35,680
Then we have a condition which require us to invoke this particular action on

61
00:03:35,680 --> 00:03:38,740
every push to the master branch or when

62
00:03:38,740 --> 00:03:42,745
a pull request is created against the master branch.

63
00:03:42,745 --> 00:03:44,620
In the jobs sections,

64
00:03:44,620 --> 00:03:47,860
we specify the operating system that

65
00:03:47,860 --> 00:03:51,710
we'd like to utilize in this case is going to be ubuntu-latest.

66
00:03:51,710 --> 00:03:55,360
Then we're going to have a sequence of steps that will run to make

67
00:03:55,360 --> 00:03:59,195
sure that we can build and more importantly, push our image.

68
00:03:59,195 --> 00:04:03,460
The first line of couse, is going to be the action to check out our code,

69
00:04:03,460 --> 00:04:08,195
so it will reference the existing code that we have with the latest creats.

70
00:04:08,195 --> 00:04:10,550
We have set up QEMU,

71
00:04:10,550 --> 00:04:15,505
which will create the execution environments for our containers.

72
00:04:15,505 --> 00:04:17,460
Then we have Docker Buildx,

73
00:04:17,460 --> 00:04:21,590
which will provide a more extensive interface to build our Docker image.

74
00:04:21,590 --> 00:04:24,520
The next thing we do is to login into Docker Hub,

75
00:04:24,520 --> 00:04:27,350
and for that we use the login action.

76
00:04:27,350 --> 00:04:31,325
This is going to reference your username and password.

77
00:04:31,325 --> 00:04:34,400
Your username and password are actually going to be

78
00:04:34,400 --> 00:04:37,780
a your DOCKERHUB-USERNAME and the DOCKERHUB-TOKEN,

79
00:04:37,780 --> 00:04:43,204
which you'll be able to create by using the reference instructions in the exercise.

80
00:04:43,204 --> 00:04:47,615
Let's actually see how you can store your Docker Hub username and token.

81
00:04:47,615 --> 00:04:52,175
For that, we can scroll all the way up and go to

82
00:04:52,175 --> 00:04:58,305
the Settings tab of your repository. Let's click on this.

83
00:04:58,305 --> 00:05:00,225
Here on the left panel,

84
00:05:00,225 --> 00:05:02,625
you'll see the Secrets tab.

85
00:05:02,625 --> 00:05:06,155
If you click on it, you'll be able to see

86
00:05:06,155 --> 00:05:12,740
your current encrypted secrets that you can use securely for your actions.

87
00:05:12,740 --> 00:05:14,800
As such, we have our GitHub Token,

88
00:05:14,800 --> 00:05:16,580
which is going to be referenced from here,

89
00:05:16,580 --> 00:05:19,370
and we're going to have our DOCKERHUB-USERNAME,

90
00:05:19,370 --> 00:05:21,290
which again is going to be referenced from here.

91
00:05:21,290 --> 00:05:26,450
You'll have an option to either remove or update those particular parameters.

92
00:05:26,450 --> 00:05:29,450
Let's go back to our GitHub action,

93
00:05:29,450 --> 00:05:31,440
scrolling all the away down.

94
00:05:31,440 --> 00:05:33,910
Once you've logged in into Docker Hub,

95
00:05:33,910 --> 00:05:37,775
of course the last thing is to build and push our image.

96
00:05:37,775 --> 00:05:40,100
For that, we're going to use the Built and Push action,

97
00:05:40,100 --> 00:05:43,445
which is already public and available for us to use.

98
00:05:43,445 --> 00:05:47,105
We will set up the context which is going to be the current directory,

99
00:05:47,105 --> 00:05:50,210
and then we're going to specify the location of our Dockerfile.

100
00:05:50,210 --> 00:05:52,640
Since we have already Dockerfile provisioned,

101
00:05:52,640 --> 00:05:54,310
we will just reference it.

102
00:05:54,310 --> 00:05:57,980
The other thing we specify is that we'd like to create an image

103
00:05:57,980 --> 00:06:02,075
which will be targeted to run on Linux machines.

104
00:06:02,075 --> 00:06:04,445
Then you have a flag which is push,

105
00:06:04,445 --> 00:06:08,340
meaning that if you'd like to push your Docker image to Docker Hub,

106
00:06:08,340 --> 00:06:11,760
then you set it to true, otherwise it going to be false.

107
00:06:11,760 --> 00:06:15,980
The last thing we do is specify a tag for our image,

108
00:06:15,980 --> 00:06:19,690
pretty much where it's going to be stored, with what version.

109
00:06:19,690 --> 00:06:22,880
In this case is our Python Hello World image is

110
00:06:22,880 --> 00:06:26,420
stored in the pixel potato repository and Docker Hub,

111
00:06:26,420 --> 00:06:30,215
and then will reference the latest version for this application.

112
00:06:30,215 --> 00:06:34,450
Let's go ahead and actually execute our GitHub action.

113
00:06:34,450 --> 00:06:38,445
I'm going go to the Python Hello World directory,

114
00:06:38,445 --> 00:06:42,280
and I'm just going to edit the README file.

115
00:06:42,280 --> 00:06:46,865
As we know, the GitHub action is going to be invoked on any push

116
00:06:46,865 --> 00:06:51,260
or pull request that's going to be created against the master branch and for that,

117
00:06:51,260 --> 00:06:55,720
I'm just going to remove this comment and submit the changes.

118
00:06:55,720 --> 00:06:58,575
Let's go to our Actions tab,

119
00:06:58,575 --> 00:07:03,075
and let's explore our Docker Build and Push action.

120
00:07:03,075 --> 00:07:10,020
Here we have the Update README commit which we've just created. Let's click on it.

121
00:07:10,020 --> 00:07:12,615
If we click on, our "Build",

122
00:07:12,615 --> 00:07:17,090
we'll be able to see a more insightful or verbose output for

123
00:07:17,090 --> 00:07:21,790
the actions that are taking place with these particular GitHub action.

124
00:07:21,790 --> 00:07:24,350
As expected, we have a checkout which

125
00:07:24,350 --> 00:07:27,680
will reference the code we currently have in the repository.

126
00:07:27,680 --> 00:07:30,530
We'll set up QEMU, the Docker Buildx.

127
00:07:30,530 --> 00:07:33,540
We already logged in into Docker Hub, which is great.

128
00:07:33,540 --> 00:07:36,985
Our credentials were successfully referenced.

129
00:07:36,985 --> 00:07:39,150
Then we have a build and push.

130
00:07:39,150 --> 00:07:43,335
Let's go and extend the build and push stage.

131
00:07:43,335 --> 00:07:46,820
This will present us with a more insightful overview of how

132
00:07:46,820 --> 00:07:51,490
our application was built using the Dockerfile and how it's pushed to Docker Hub.

133
00:07:51,490 --> 00:07:53,195
If you scroll up a bit more down,

134
00:07:53,195 --> 00:07:55,415
we'll be able to see that we already referenced

135
00:07:55,415 --> 00:07:59,825
the Python image that we choose for our base image in the Dockerfile,

136
00:07:59,825 --> 00:08:02,450
and then we'll seek some of the instructions being followed,

137
00:08:02,450 --> 00:08:04,895
such as the Copy command,

138
00:08:04,895 --> 00:08:08,445
we'll be able to see our Working directory,

139
00:08:08,445 --> 00:08:12,430
installing and your requirements using paper and so forth.

140
00:08:12,430 --> 00:08:15,470
The end result of this particular action is to see

141
00:08:15,470 --> 00:08:18,560
that we've actually pushed our image to Docker Hub.

142
00:08:18,560 --> 00:08:21,090
Let's go back to Docker Hub view.

143
00:08:21,370 --> 00:08:27,210
If you look into our Tags tab,

144
00:08:27,210 --> 00:08:30,065
we'll be able to see that we have a new tag.

145
00:08:30,065 --> 00:08:34,085
We've the latest tag all ready attached,

146
00:08:34,085 --> 00:08:36,380
which was pushed a minute ago.

147
00:08:36,380 --> 00:08:39,470
This is how you'd be able to build and push

148
00:08:39,470 --> 00:08:43,010
your application to Docker Hub, but more importantly,

149
00:08:43,010 --> 00:08:45,710
have a hands off process where

150
00:08:45,710 --> 00:08:51,840
your build and push will be triggered when your marriage your code to the master branch.

